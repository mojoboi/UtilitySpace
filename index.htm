<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pembrook Space</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-database.js"></script>
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    colors: {
                        primary: {
                            100: '#d1e4ff',
                            200: '#a3c9ff',
                            300: '#75aeff',
                            400: '#4793ff',
                            500: '#1978ff',
                            600: '#1460cc',
                            700: '#0f4899',
                            800: '#0a3066',
                            900: '#051833',
                        },
                        secondary: {
                            100: '#f0f9ff',
                            200: '#e0f2fe',
                            300: '#bae6fd',
                            400: '#7dd3fc',
                            500: '#38bdf8',
                            600: '#0ea5e9',
                            700: '#0284c7',
                            800: '#0369a1',
                            900: '#075985',
                        }
                    }
                }
            }
        }
    </script>
    <style>
        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
        .animate-pulse {
            animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }
        .switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
        }
        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }
        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }
        input:checked + .slider {
            background-color: #1978ff;
        }
        input:checked + .slider:before {
            transform: translateX(26px);
        }
        .modal {
            transition: opacity 0.25s ease;
        }
    </style>
</head>
<body class="bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200 min-h-screen">
    <div class="container mx-auto px-4 py-8 max-w-md">
        <header class="mb-8">
            <div>
                <h1 class="text-3xl font-bold text-primary-600 dark:text-primary-400">Pembrook Space</h1>
                <p class="text-gray-600 dark:text-gray-400 mt-2">A simple web app to let fellow housemates know who is using what so they can time things accordingly :)</p>
            </div>
            <div class="flex items-center space-x-4 mt-4">
                <div class="flex items-center">
                    <i class="fas fa-moon mr-2"></i>
                    <label class="switch">
                        <input type="checkbox" id="darkModeToggle">
                        <span class="slider"></span>
                    </label>
                    <i class="fas fa-sun ml-2"></i>
                </div>
                <button id="editUserBtn" class="p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700">
                    <i class="fas fa-user-edit"></i>
                </button>
            </div>
        </header>

        <div class="space-y-6 mb-8">
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden">
                <div class="bg-primary-500 dark:bg-primary-700 p-4">
                    <h2 class="text-xl font-semibold text-white flex items-center">
                        <i class="fas fa-washer mr-2"></i> Laundry - Washer
                    </h2>
                </div>
                <div class="p-6">
                    <div id="washerStatus" class="text-center py-4">
                        <div class="text-5xl mb-4">
                            <i class="fas fa-check-circle text-green-500"></i>
                        </div>
                        <p class="text-xl font-medium">Available</p>
                    </div>
                    <div id="washerUserInfo" class="hidden text-center py-4">
                        <div class="text-5xl mb-4">
                            <i class="fas fa-user-clock text-yellow-500"></i>
                        </div>
                        <p class="text-xl font-medium" id="washerUserName"></p>
                        <p class="text-gray-600 dark:text-gray-400" id="washerUserDetails"></p>
                        <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">Using since <span id="washerTime"></span></p>
                    </div>
                    <button id="washerBtn" class="w-full bg-primary-500 hover:bg-primary-600 text-white font-bold py-3 px-4 rounded-lg transition duration-200">
                        Mark as In Use
                    </button>
                    <button id="washerFreeBtn" class="w-full bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-200 font-bold py-3 px-4 rounded-lg mt-2 hidden transition duration-200">
                        Mark as Available
                    </button>
                </div>
            </div>

            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden">
                <div class="bg-primary-500 dark:bg-primary-700 p-4">
                    <h2 class="text-xl font-semibold text-white flex items-center">
                        <i class="fas fa-wind mr-2"></i> Laundry - Dryer
                    </h2>
                </div>
                <div class="p-6">
                    <div id="dryerStatus" class="text-center py-4">
                        <div class="text-5xl mb-4">
                            <i class="fas fa-check-circle text-green-500"></i>
                        </div>
                        <p class="text-xl font-medium">Available</p>
                    </div>
                    <div id="dryerUserInfo" class="hidden text-center py-4">
                        <div class="text-5xl mb-4">
                            <i class="fas fa-user-clock text-yellow-500"></i>
                        </div>
                        <p class="text-xl font-medium" id="dryerUserName"></p>
                        <p class="text-gray-600 dark:text-gray-400" id="dryerUserDetails"></p>
                        <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">Using since <span id="dryerTime"></span></p>
                    </div>
                    <button id="dryerBtn" class="w-full bg-primary-500 hover:bg-primary-600 text-white font-bold py-3 px-4 rounded-lg transition duration-200">
                        Mark as In Use
                    </button>
                    <button id="dryerFreeBtn" class="w-full bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-200 font-bold py-3 px-4 rounded-lg mt-2 hidden transition duration-200">
                        Mark as Available
                    </button>
                </div>
            </div>

            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden">
                <div class="bg-primary-500 dark:bg-primary-700 p-4">
                    <h2 class="text-xl font-semibold text-white flex items-center">
                        <i class="fas fa-utensils mr-2"></i> Kitchen
                    </h2>
                </div>
                <div class="p-6">
                    <div id="kitchenStatus" class="text-center py-4">
                        <div class="text-5xl mb-4">
                            <i class="fas fa-check-circle text-green-500"></i>
                        </div>
                        <p class="text-xl font-medium">Available</p>
                    </div>
                    <div id="kitchenUserInfo" class="hidden text-center py-4">
                        <div class="text-5xl mb-4">
                            <i class="fas fa-user-clock text-yellow-500"></i>
                        </div>
                        <p class="text-xl font-medium" id="kitchenUserName"></p>
                        <p class="text-gray-600 dark:text-gray-400" id="kitchenUserDetails"></p>
                        <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">Using since <span id="kitchenTime"></span></p>
                    </div>
                    <button id="kitchenBtn" class="w-full bg-primary-500 hover:bg-primary-600 text-white font-bold py-3 px-4 rounded-lg transition duration-200">
                        Mark as In Use
                    </button>
                    <button id="kitchenFreeBtn" class="w-full bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-200 font-bold py-3 px-4 rounded-lg mt-2 hidden transition duration-200">
                        Mark as Available
                    </button>
                </div>
            </div>
        </div>

        <div id="userModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden modal">
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6 w-full max-w-md">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-xl font-bold">Your Information</h3>
                    <button id="closeModal" class="text-gray-500 hover:text-gray-700 dark:hover:text-gray-300">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div id="userForm">
                    <div class="mb-4">
                        <label for="name" class="block text-gray-700 dark:text-gray-300 mb-2">Full Name</label>
                        <input type="text" id="name" name="name" required class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 dark:bg-gray-700 dark:text-white">
                    </div>
                    <div class="mb-4">
                        <label for="houseNumber" class="block text-gray-700 dark:text-gray-300 mb-2">House Number</label>
                        <input type="text" id="houseNumber" name="houseNumber" required class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 dark:bg-gray-700 dark:text-white">
                    </div>
                    <div class="mb-6">
                        <label for="roomNumber" class="block text-gray-700 dark:text-gray-300 mb-2">Room Number</label>
                        <input type="text" id="roomNumber" name="roomNumber" required class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 dark:bg-gray-700 dark:text-white">
                    </div>
                    <button id="saveUserBtn" class="w-full bg-primary-500 hover:bg-primary-600 text-white font-bold py-3 px-4 rounded-lg transition duration-200">
                        Save Information
                    </button>
                </div>
            </div>
        </div>

        <div id="confirmModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden modal">
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6 w-full max-w-md">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-xl font-bold">Confirm Action</h3>
                    <button id="closeConfirmModal" class="text-gray-500 hover:text-gray-700 dark:hover:text-gray-300">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <p id="confirmMessage" class="mb-6">Are you sure you want to mark this space as in use?</p>
                <div class="flex justify-end space-x-4">
                    <button id="cancelConfirm" class="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition duration-200">
                        Cancel
                    </button>
                    <button id="confirmAction" class="px-4 py-2 bg-primary-500 hover:bg-primary-600 text-white rounded-lg transition duration-200">
                        Confirm
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        const firebaseConfig = {
            apiKey: "AIzaSyDxO53ARV8CDYNFrs65NTKAnf6bFlbWpik",
            authDomain: "utilityspacepembr.firebaseapp.com",
            databaseURL: "https://utilityspacepembr-default-rtdb.firebaseio.com",
            projectId: "utilityspacepembr",
            storageBucket: "utilityspacepembr.firebasestorage.app",
            messagingSenderId: "421678305752",
            appId: "1:421678305752:web:cf9134ec23a7a048c3e2ad",
            measurementId: "G-WM11W9FNVX"
        };
        let database;
        try {
            firebase.initializeApp(firebaseConfig);
            database = firebase.database();
            console.log("Firebase initialized successfully");
        } catch (error) {
            console.error("Firebase initialization failed:", error);
        }
        let userInfo = null;
        let currentSpace = null;

        document.addEventListener('DOMContentLoaded', function() {
            console.log("DOM fully loaded");

            // Dark mode toggle
            const darkModeToggle = document.getElementById('darkModeToggle');
            if (!darkModeToggle) {
                console.error("Dark mode toggle not found");
                return;
            }
            if (localStorage.getItem('darkMode') === 'true') {
                document.documentElement.classList.add('dark');
                darkModeToggle.checked = true;
            }
            darkModeToggle.addEventListener('change', function() {
                document.documentElement.classList.toggle('dark', this.checked);
                localStorage.setItem('darkMode', this.checked);
                console.log("Dark mode toggled:", this.checked);
            });

            // User modal handling
            const editUserBtn = document.getElementById('editUserBtn');
            const userModal = document.getElementById('userModal');
            const closeModal = document.getElementById('closeModal');
            const saveUserBtn = document.getElementById('saveUserBtn');

            if (!editUserBtn || !userModal || !closeModal || !saveUserBtn) {
                console.error("User modal elements missing");
                return;
            }

            editUserBtn.addEventListener('click', function() {
                if (userInfo) {
                    document.getElementById('name').value = userInfo.name;
                    document.getElementById('houseNumber').value = userInfo.houseNumber;
                    document.getElementById('roomNumber').value = userInfo.roomNumber;
                }
                userModal.classList.remove('hidden');
                console.log("User modal opened");
            });

            closeModal.addEventListener('click', function() {
                userModal.classList.add('hidden');
                console.log("User modal closed");
            });

            saveUserBtn.addEventListener('click', function(e) {
                e.preventDefault();
                const name = document.getElementById('name').value;
                const houseNumber = document.getElementById('houseNumber').value;
                const roomNumber = document.getElementById('roomNumber').value;
                if (!name || !houseNumber || !roomNumber) {
                    console.error("User form fields incomplete");
                    return;
                }
                userInfo = { name, houseNumber, roomNumber };
                if (database) {
                    database.ref('users/' + roomNumber).set(userInfo).then(() => {
                        localStorage.setItem('roomNumber', roomNumber);
                        userModal.classList.add('hidden');
                        console.log("User info saved:", userInfo);
                    }).catch(error => {
                        console.error("Error saving user info:", error);
                    });
                } else {
                    localStorage.setItem('roomNumber', roomNumber);
                    userModal.classList.add('hidden');
                    console.log("User info saved locally (no Firebase):", userInfo);
                }
            });

            // Load user info
            const storedRoomNumber = localStorage.getItem('roomNumber');
            if (storedRoomNumber && database) {
                database.ref('users/' + storedRoomNumber).once('value').then(snapshot => {
                    userInfo = snapshot.val();
                    if (userInfo) {
                        console.log("User info loaded:", userInfo);
                    } else {
                        console.log("No user data found, opening modal");
                        userModal.classList.remove('hidden');
                    }
                }).catch(error => {
                    console.error("Error loading user data:", error);
                    userModal.classList.remove('hidden');
                });
            } else {
                console.log("No stored room number, opening modal");
                userModal.classList.remove('hidden');
            }

            // Space status functions
            function showInUse(space, user, time) {
                const status = document.getElementById(`${space}Status`);
                const userInfoDiv = document.getElementById(`${space}UserInfo`);
                const btn = document.getElementById(`${space}Btn`);
                const freeBtn = document.getElementById(`${space}FreeBtn`);
                if (!status || !userInfoDiv || !btn || !freeBtn) {
                    console.error(`Elements missing for ${space}`);
                    return;
                }
                status.classList.add('hidden');
                userInfoDiv.classList.remove('hidden');
                btn.classList.add('hidden');
                freeBtn.classList.remove('hidden');
                document.getElementById(`${space}UserName`).textContent = user.name;
                document.getElementById(`${space}UserDetails`).textContent = `House #${user.houseNumber}, Room ${user.roomNumber}`;
                document.getElementById(`${space}Time`).textContent = formatTime(time);
                console.log(`${space} marked as in use by ${user.name}`);
            }

            function showAvailable(space) {
                const status = document.getElementById(`${space}Status`);
                const userInfoDiv = document.getElementById(`${space}UserInfo`);
                const btn = document.getElementById(`${space}Btn`);
                const freeBtn = document.getElementById(`${space}FreeBtn`);
                if (!status || !userInfoDiv || !btn || !freeBtn) {
                    console.error(`Elements missing for ${space}`);
                    return;
                }
                status.classList.remove('hidden');
                userInfoDiv.classList.add('hidden');
                btn.classList.remove('hidden');
                freeBtn.classList.add('hidden');
                console.log(`${space} marked as available`);
            }

            function formatTime(timestamp) {
                const date = new Date(timestamp);
                return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
            }

            // Load space status
            function loadSpaceStatus() {
                if (!database) {
                    console.error("Database not initialized");
                    return;
                }
                ['washer', 'dryer', 'kitchen'].forEach(space => {
                    database.ref('spaces/' + space).on('value', snapshot => {
                        console.log("Received update for", space, ":", snapshot.val());
                        const data = snapshot.val();
                        if (data && data.inUse) {
                            showInUse(space, data.user, data.time);
                        } else {
                            showAvailable(space);
                        }
                    }, error => {
                        console.error(`Error fetching ${space} status:`, error);
                    });
                });
            }

            // Button handlers
            function setupSpaceButton(space) {
                const btn = document.getElementById(`${space}Btn`);
                const freeBtn = document.getElementById(`${space}FreeBtn`);
                const confirmModal = document.getElementById('confirmModal');
                const cancelConfirm = document.getElementById('cancelConfirm');
                const closeConfirmModal = document.getElementById('closeConfirmModal');

                if (!btn || !freeBtn || !confirmModal || !cancelConfirm || !closeConfirmModal) {
                    console.error(`Button setup failed for ${space}: missing elements`);
                    return;
                }

                btn.addEventListener('click', function() {
                    if (!userInfo) {
                        userModal.classList.remove('hidden');
                        console.log("User info required");
                        return;
                    }
                    currentSpace = space;
                    document.getElementById('confirmMessage').textContent = `Are you sure you want to mark the ${space} as in use?`;
                    confirmModal.classList.remove('hidden');
                    console.log("Confirmation modal opened for", space);
                });

                freeBtn.addEventListener('click', function() {
                    if (database) {
                        database.ref('spaces/' + space).set({ inUse: false }).then(() => {
                            console.log(`${space} marked as available`);
                        }).catch(error => {
                            console.error(`Error marking ${space} as available:`, error);
                        });
                    }
                });

                cancelConfirm.addEventListener('click', () => {
                    confirmModal.classList.add('hidden');
                    currentSpace = null;
                    console.log("Confirmation cancelled");
                });
                closeConfirmModal.addEventListener('click', () => {
                    confirmModal.classList.add('hidden');
                    currentSpace = null;
                    console.log("Confirmation modal closed");
                });
            }

            // Set up buttons for each space
            ['washer', 'dryer', 'kitchen'].forEach(setupSpaceButton);

            // Single event listener for confirm button
            document.getElementById('confirmAction').addEventListener('click', function() {
                if (!currentSpace) {
                    console.error("No space selected");
                    return;
                }
                if (!database) {
                    console.error("Database not initialized");
                    return;
                }
                if (!userInfo) {
                    console.error("User info not set");
                    return;
                }
                const now = Date.now();
                console.log("Confirm button clicked, attempting to set", currentSpace, "to in use");
                database.ref('spaces/' + currentSpace).set({
                    inUse: true,
                    user: userInfo,
                    time: now
                }).then(() => {
                    console.log(currentSpace, "marked as in use successfully");
                    document.getElementById('confirmModal').classList.add('hidden');
                    currentSpace = null;
                }).catch(error => {
                    console.error("Error marking", currentSpace, "as in use:", error);
                });
            });

            // Initialize space status listeners
            loadSpaceStatus();
        });
    </script>
</body>
</html>
