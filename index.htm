<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pembrook Space</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-app.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.22.0/firebase-database.js"></script>
    <script>
        tailwind.config = {
            darkMode: 'class',
            theme: {
                extend: {
                    colors: {
                        primary: {
                            100: '#d1e4ff',
                            200: '#a3c9ff',
                            300: '#75aeff',
                            400: '#4793ff',
                            500: '#1978ff',
                            600: '#1460cc',
                            700: '#0f4899',
                            800: '#0a3066',
                            900: '#051833',
                        },
                        secondary: {
                            100: '#f0f9ff',
                            200: '#e0f RAW_2_fe',
                            300: '#bae6fd',
                            400: '#7dd3fc',
                            500: '#38bdf8',
                            600: '#0ea5e9',
                            700: '#0284c7',
                            800: '#0369a1',
                            900: '#075985',
                        }
                    }
                }
            }
        }
    </script>
    <style>
        @keyframes pulse {
            0%, 100% {
                opacity: 1;
            }
            50% {
                opacity: 0.5;
            }
        }
        .animate-pulse {
            animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
        }
        .switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
        }
        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }
        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }
        input:checked + .slider {
            background-color: #1978ff;
        }
        input:checked + .slider:before {
            transform: translateX(26px);
        }
        .modal {
            transition: opacity 0.25s ease;
        }
    </style>
</head>
<body class="bg-gray-100 dark:bg-gray-900 text-gray-800 dark:text-gray-200 min-h-screen">
    <div class="container mx-auto px-4 py-8 max-w-md">
        <!-- Header -->
        <header class="mb-8">
            <div>
                <h1 class="text-3xl font-bold text-primary-600 dark:text-primary-400">Pembrook Space</h1>
                <p class="text-gray-600 dark:text-gray-400 mt-2">A simple web app to let fellow housemates know who is using what so they can time things accordingly :)</p>
            </div>
            <div class="flex items-center space-x-4 mt-4">
                <div class="flex items-center">
                    <i class="fas fa-moon mr-2"></i>
                    <label class="switch">
                        <input type="checkbox" id="darkModeToggle">
                        <span class="slider"></span>
                    </label>
                    <i class="fas fa-sun ml-2"></i>
                </div>
                <button id="editUserBtn" class="p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700">
                    <i class="fas fa-user-edit"></i>
                </button>
            </div>
        </header>

        <!-- Status Cards - Vertical Layout -->
        <div class="space-y-6 mb-8">
            <!-- Laundry - Washer -->
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden">
                <div class="bg-primary-500 dark:bg-primary-700 p-4">
                    <h2 class="text-xl font-semibold text-white flex items-center">
                        <i class="fas fa-washer mr-2"></i> Laundry - Washer
                    </h2>
                </div>
                <div class="p-6">
                    <div id="washerStatus" class="text-center py-4">
                        <div class="text-5xl mb-4">
                            <i class="fas fa-check-circle text-green-500"></i>
                        </div>
                        <p class="text-xl font-medium">Available</p>
                    </div>
                    <div id="washerUserInfo" class="hidden text-center py-4">
                        <div class="text-5xl mb-4">
                            <i class="fas fa-user-clock text-yellow-500"></i>
                        </div>
                        <p class="text-xl font-medium" id="washerUserName"></p>
                        <p class="text-gray-600 dark:text-gray-400" id="washerUserDetails"></p>
                        <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">Using since <span id="washerTime"></span></p>
                    </div>
                    <button id="washerBtn" class="w-full bg-primary-500 hover:bg-primary-600 text-white font-bold py-3 px-4 rounded-lg transition duration-200">
                        Mark as In Use
                    </button>
                    <button id="washerFreeBtn" class="w-full bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-200 font-bold py-3 px-4 rounded-lg mt-2 hidden transition duration-200">
                        Mark as Available
                    </button>
                </div>
            </div>

            <!-- Laundry - Dryer -->
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden">
                <div class="bg-primary-500 dark:bg-primary-700 p-4">
                    <h2 class="text-xl font-semibold text-white flex items-center">
                        <i class="fas fa-wind mr-2"></i> Laundry - Dryer
                    </h2>
                </div>
                <div class="p-6">
                    <div id="dryerStatus" class="text-center py-4">
                        <div class="text-5xl mb-4">
                            <i class="fas fa-check-circle text-green-500"></i>
                        </div>
                        <p class="text-xl font-medium">Available</p>
                    </div>
                    <div id="dryerUserInfo" class="hidden text-center py-4">
                        <div class="text-5xl mb-4">
                            <i class="fas fa-user-clock text-yellow-500"></i>
                        </div>
                        <p class="text-xl font-medium" id="dryerUserName"></p>
                        <p class="text-gray-600 dark:text-gray-400" id="dryerUserDetails"></p>
                        <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">Using since <span id="dryerTime"></span></p>
                    </div>
                    <button id="dryerBtn" class="w-full bg-primary-500 hover:bg-primary-600 text-white font-bold py-3 px-4 rounded-lg transition duration-200">
                        Mark as In Use
                    </button>
                    <button id="dryerFreeBtn" class="w-full bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-200 font-bold py-3 px-4 rounded-lg mt-2 hidden transition duration-200">
                        Mark as Available
                    </button>
                </div>
            </div>

            <!-- Kitchen -->
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg overflow-hidden">
                <div class="bg-primary-500 dark:bg-primary-700 p-4">
                    <h2 class="text-xl font-semibold text-white flex items-center">
                        <i class="fas fa-utensils mr-2"></i> Kitchen
                    </h2>
                </div>
                <div class="p-6">
                    <div id="kitchenStatus" class="text-center py-4">
                        <div class="text-5xl mb-4">
                            <i class="fas fa-check-circle text-green-500"></i>
                        </div>
                        <p class="text-xl font-medium">Available</p>
                    </div>
                    <div id="kitchenUserInfo" class="hidden text-center py-4">
                        <div class="text-5xl mb-4">
                            <i class="fas fa-user-clock text-yellow-500"></i>
                        </div>
                        <p class="text-xl font-medium" id="kitchenUserName"></p>
                        <p class="text-gray-600 dark:text-gray-400" id="kitchenUserDetails"></p>
                        <p class="text-sm text-gray-500 dark:text-gray-400 mt-2">Using since <span id="kitchenTime"></span></p>
                    </div>
                    <button id="kitchenBtn" class="w-full bg-primary-500 hover:bg-primary-600 text-white font-bold py-3 px-4 rounded-lg transition duration-200">
                        Mark as In Use
                    </button>
                    <button id="kitchenFreeBtn" class="w-full bg-gray-200 hover:bg-gray-300 dark:bg-gray-700 dark:hover:bg-gray-600 text-gray-800 dark:text-gray-200 font-bold py-3 px-4 rounded-lg mt-2 hidden transition duration-200">
                        Mark as Available
                    </button>
                </div>
            </div>
        </div>

        <!-- User Modal -->
        <div id="userModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden modal">
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6 w-full max-w-md">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-xl font-bold">Your Information</h3>
                    <button id="closeModal" class="text-gray-500 hover:text-gray-700 dark:hover:text-gray-300">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <form id="userForm">
                    <div class="mb-4">
                        <label for="name" class="block text-gray-700 dark:text-gray-300 mb-2">Full Name</label>
                        <input type="text" id="name" name="name" required class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 dark:bg-gray-700 dark:text-white">
                    </div>
                    <div class="mb-4">
                        <label for="houseNumber" class="block text-gray-700 dark:text-gray-300 mb-2">House Number</label>
                        <input type="text" id="houseNumber" name="houseNumber" required class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 dark:bg-gray-700 dark:text-white">
                    </div>
                    <div class="mb-6">
                        <label for="roomNumber" class="block text-gray-700 dark:text-gray-300 mb-2">Room Number</label>
                        <input type="text" id="roomNumber" name="roomNumber" required class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 dark:bg-gray-700 dark:text-white">
                    </div>
                    <button type="submit" class="w-full bg-primary-500 hover:bg-primary-600 text-white font-bold py-3 px-4 rounded-lg transition duration-200">
                        Save Information
                    </button>
                </form>
            </div>
        </div>

        <!-- Confirmation Modal -->
        <div id="confirmModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 hidden modal">
            <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl p-6 w-full max-w-md">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-xl font-bold">Confirm Action</h3>
                    <button id="closeConfirmModal" class="text-gray-500 hover:text-gray-700 dark:hover:text-gray-300">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <p id="confirmMessage" class="mb-6">Are you sure you want to mark this space as in use?</p>
                <div class="flex justify-end space-x-4">
                    <button id="cancelConfirm" class="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition duration-200">
                        Cancel
                    </button>
                    <button id="confirmAction" class="px-4 py-2 bg-primary-500 hover:bg-primary-600 text-white rounded-lg transition duration-200">
                        Confirm
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Firebase Configuration (Replace placeholders with your Firebase details)
        const firebaseConfig = {
            apiKey: "AIzaSyDxO53ARV8CDYNFrs65NTKAnf6bFlbWpik",
            authDomain: "utilityspacepembr.firebaseapp.com",
            databaseURL: "https://utilityspacepembr-default-rtdb.firebaseio.com",
            projectId: "utilityspacepembr",
            storageBucket: "utilityspacepembr.firebasestorage.app",
            messagingSenderId: "421678305752",
            appId: "1:421678305752:web:cf9134ec23a7a048c3e2ad"
        };
        // Initialize Firebase
        firebase.initializeApp(firebaseConfig);
        const database = firebase.database();

        document.addEventListener('DOMContentLoaded', function() {
            // Check for dark mode preference
            if (localStorage.getItem('darkMode') === 'true' || (!localStorage.getItem('darkMode') && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
                document.documentElement.classList.add('dark');
                document.getElementById('darkModeToggle').checked = true;
            }

            // Dark mode toggle
            document.getElementById('darkModeToggle').addEventListener('change', function() {
                if (this.checked) {
                    document.documentElement.classList.add('dark');
                    localStorage.setItem('darkMode', 'true');
                } else {
                    document.documentElement.classList.remove('dark');
                    localStorage.setItem('darkMode', 'false');
                }
            });

            // Check if user info exists in Firebase
            let userInfo = null;
            database.ref('users').once('value', (snapshot) => {
                const users = snapshot.val();
                if (!users) {
                    document.getElementById('userModal').classList.remove('hidden');
                }
            });

            // Modal handling
            document.getElementById('editUserBtn').addEventListener('click', function() {
                database.ref('users').once('value', (snapshot) => {
                    const users = snapshot.val();
                    if (users && userInfo) {
                        document.getElementById('name').value = userInfo.name;
                        document.getElementById('houseNumber').value = userInfo.houseNumber;
                        document.getElementById('roomNumber').value = userInfo.roomNumber;
                    }
                    document.getElementById('userModal').classList.remove('hidden');
                });
            });

            document.getElementById('closeModal').addEventListener('click', function() {
                document.getElementById('userModal').classList.add('hidden');
            });

            document.getElementById('userForm').addEventListener('submit', function(e) {
                e.preventDefault();
                const name = document.getElementById('name').value;
                const houseNumber = document.getElementById('houseNumber').value;
                const roomNumber = document.getElementById('roomNumber').value;
                
                userInfo = { name, houseNumber, roomNumber };
                database.ref('users/' + roomNumber).set({
                    name,
                    houseNumber,
                    roomNumber
                });
                
                document.getElementById('userModal').classList.add('hidden');
            });

            // Load space status from Firebase
            function loadSpaceStatus() {
                database.ref('spaces/washer').on('value', (snapshot) => {
                    const data = snapshot.val();
                    if (data && data.inUse) {
                        showInUse('washer', data.user, data.time);
                    } else {
                        showAvailable('washer');
                    }
                });

                database.ref('spaces/dryer').on('value', (snapshot) => {
                    const data = snapshot.val();
                    if (data && data.inUse) {
                        showInUse('dryer', data.user, data.time);
                    } else {
                        showAvailable('dryer');
                    }
                });

                database.ref('spaces/kitchen').on('value', (snapshot) => {
                    const data = snapshot.val();
                    if (data && data.inUse) {
                        showInUse('kitchen', data.user, data.time);
                    } else {
                        showAvailable('kitchen');
                    }
                });
            }

            // Show space as in use
            function showInUse(space, user, time) {
                document.getElementById(`${space}Status`).classList.add('hidden');
                document.getElementById(`${space}UserInfo`).classList.remove('hidden');
                document.getElementById(`${space}Btn`).classList.add('hidden');
                document.getElementById(`${space}FreeBtn`).classList.remove('hidden');
                
                document.getElementById(`${space}UserName`).textContent = user.name;
                document.getElementById(`${space}UserDetails`).textContent = `House #${user.houseNumber}, Room ${user.roomNumber}`;
                document.getElementById(`${space}Time`).textContent = formatTime(time);
            }

            // Show space as available
            function showAvailable(space) {
                document.getElementById(`${space}Status`).classList.remove('hidden');
                document.getElementById(`${space}UserInfo`).classList.add('hidden');
                document.getElementById(`${space}Btn`).classList.remove('hidden');
                document.getElementById(`${space}FreeBtn`).classList.add('hidden');
            }

            // Format time
            function formatTime(timestamp) {
                const date = new Date(timestamp);
                let hours = date.getHours();
                const minutes = date.getMinutes().toString().padStart(2, '0');
                const ampm = hours >= 12 ? 'PM' : 'AM';
                hours = hours % 12;
                hours = hours ? hours : 12;
                return `${hours}:${minutes} ${ampm}`;
            }

            // Button handlers
            function setupSpaceButton(space) {
                const btn = document.getElementById(`${space}Btn`);
                const freeBtn = document.getElementById(`${space}FreeBtn`);
                
                btn.addEventListener('click', function() {
                    if (!userInfo) {
                        document.getElementById('userModal').classList.remove('hidden');
                        return;
                    }
                    
                    document.getElementById('confirmMessage').textContent = `Are you sure you want to mark the ${space.replace('-', ' ')} as in use?`;
                    document.getElementById('confirmModal').classList.remove('hidden');
                    
                    document.getElementById('confirmAction').onclick = function() {
                        const now = new Date();
                        const status = {
                            inUse: true,
                            user: userInfo,
                            time: now.getTime()
                        };
                        
                        database.ref('spaces/' + space).set(status);
                        document.getElementById('confirmModal').classList.add('hidden');
                    };
                });
                
                freeBtn.addEventListener('click', function() {
                    database.ref('spaces/' + space).set({
                        inUse: false
                    });
                });
            }

            // Setup all space buttons
            setupSpaceButton('washer');
            setupSpaceButton('dryer');
            setupSpaceButton('kitchen');

            // Confirmation modal handling
            document.getElementById('closeConfirmModal').addEventListener('click', function() {
                document.getElementById('confirmModal').classList.add('hidden');
            });

            document.getElementById('cancelConfirm').addEventListener('click', function() {
                document.getElementById('confirmModal').classList.add('hidden');
            });

            // Load initial status
            loadSpaceStatus();
        });
    </script>
</body>
</html>
